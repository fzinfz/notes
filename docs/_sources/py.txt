

.. code:: python

    import psutil
    psutil.phymem_usage()

File
====

.. code:: python

    import os
    os.path.exists(path_ori) 
    os.rename(path_ori, path_bak)    
    os.makedirs(path_ori)

.. code:: python

    datetime.datetime.fromtimestamp( os.path.getmtime('/tmp') ,tz)




.. parsed-literal::

    datetime.datetime(2015, 6, 1, 0, 45, 2, 318563, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)



.. code:: python

    from IPython.display import Image
    Image(filename='temp.png')  #Display image

String
======

.. code:: python

    ("hue" * 3).upper()




.. parsed-literal::

    'HUEHUEHUE'



.. code:: python

    str = "is is is";
    print(str.replace("is", "was"))
    print(str.replace("is", "was", 2))


.. parsed-literal::

    was was was
    was was is


.. code:: python

    " \tworld\n  ".strip()    # strip, lstrip, rstrip




.. parsed-literal::

    'world'



.. code:: python

    print(str(b'946809'), end = " ### " )
    print(b'946809'.decode('utf8') )


.. parsed-literal::

    b'946809' ### 946809


.. code:: python

    "%.2f" % float("3.5555")




.. parsed-literal::

    '3.56'



.. code:: python

    from urllib.parse import urlparse
    
    def get_filename_from_url(url):
        return urlparse(url).path.split('/')[-1]
    
    url = "http://imgqn.xxx.com/upload_files/2015/05/29/yyy.jpg!730x0.jpg"
    urlparse(url)




.. parsed-literal::

    ParseResult(scheme='http', netloc='imgqn.xxx.com', path='/upload_files/2015/05/29/yyy.jpg!730x0.jpg', params='', query='', fragment='')



.. code:: python

    from bs4 import BeautifulSoup  # analyze html
    #http://www.crummy.com/software/BeautifulSoup/bs4/doc/
    soup = BeautifulSoup(html_doc)
    soup.p['class']
    soup.find_all('a')
    soup.find_all('img', src=True):
    soup.find_all("div", { "class" : "xxx"})  
    soup.find(id="link3")
    # <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>

Regex
-----

| https://www.regex101.com/
| http://regexr.com/

.. code:: python

    import re
    re.sub(r'(?i)\b(u|you+)\b', "your name", 'u YOU')




.. parsed-literal::

    'your name your name'



.. code:: python

    m = re.search("\w",'1dfsde2')
    if m: 
        print(m.group(0))
    m    


.. parsed-literal::

    1




.. parsed-literal::

    <_sre.SRE_Match object; span=(0, 1), match='1'>



.. code:: python

    print( 'Positive Lookbehind:\t' + re.sub(u'(?<=a)b', "*", 'abc a b c') )
    print( 'Negative Lookbehind:\t' + re.sub(u'(?<!a)b', "*", 'abc a b c') )
    print( 'Positive Lookahead:\t'  + re.sub(u'b(?=c)', "*", 'abc a b c') )
    print( 'Negative Lookahead:\t'  + re.sub(u'b(?!c)', "*", 'abc a b c') )


.. parsed-literal::

    Positive Lookbehind:	a*c a b c
    Negative Lookbehind:	abc a * c
    Positive Lookahead:	a*c a b c
    Negative Lookahead:	abc a * c


Skills
======

.. code:: python

    #conditional operator 
    '' if True else "x"  # don't use: True and "" or "x"




.. parsed-literal::

    ''



.. code:: python

    requests.get("http://....").content #get online html content

.. code:: python

    spam = 'hue'.__mul__  #a function
    spam(4)




.. parsed-literal::

    'huehuehuehue'



.. code:: python

    import string
    sentence = "The quick brown fox jumps over the lazy dog"  #pangram 
    len( [s for s in list(string.ascii_lowercase) if s in str.lower(sentence)]  )




.. parsed-literal::

    26



.. code:: python

    all(letter in sentence for letter in string.ascii_lowercase)




.. parsed-literal::

    True



.. code:: python

    any(l == 't' for l in 'python') # Returns True. Same as: 't' in 'python




.. parsed-literal::

    True



.. code:: python

    all(l == 't' for l in 'python') # Returns False. Not all of the letters are 't'.




.. parsed-literal::

    False



.. code:: python

    from random import randint,seed
    seed(1)
    randint(1,100) #always the same




.. parsed-literal::

    18



.. code:: python

    for i, j in enumerate('abc'): print(str(i) + ":" + j)


.. parsed-literal::

    0:a
    1:b
    2:c


.. code:: python

    from functools import reduce 
    a = ['1', '2', '3'] 
    reduce(lambda x, y: x + '-' + y, a) 




.. parsed-literal::

    '1-2-3'



.. code:: python

    a,b = [1,2,2], [2]
    list(filter( lambda x: x not in b ,a))
    [x for x in a if x not in b]




.. parsed-literal::

    [1]



.. code:: python

    list(map(lambda x: x*2,[1,2,3]))




.. parsed-literal::

    [2, 4, 6]



.. code:: python

    sorted(['ad','abd','b'])




.. parsed-literal::

    ['abd', 'ad', 'b']



.. code:: python

    sorted({'ad','abd','b','b'})




.. parsed-literal::

    ['abd', 'ad', 'b']



.. code:: python

    [{x for x in range(8)}]




.. parsed-literal::

    [{0, 1, 2, 3, 4, 5, 6, 7}]



.. code:: python

    a1 = ["live", "arp", "strong"] 
    a2 = ["lively", "alive", "harp", "sharp", "armstrong"]
    [s1 for s1 in a1 for s2 in a2 if s1 in s2]




.. parsed-literal::

    ['live', 'live', 'arp', 'arp', 'strong']



.. code:: python

    students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10),]  
    sorted(students, key=lambda s : s[2])   # sort by age  




.. parsed-literal::

    [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]



.. code:: python

    {1,3,2} - {1}




.. parsed-literal::

    {2, 3}



.. code:: python

    {1,3,2} & {1}




.. parsed-literal::

    {1}



.. code:: python

    a = {'i': 30,'u': 20,'she':44}
    b = {'i': 31,'u': 21,'he': 55}
    c = a.copy()
    c.update(b)
    c




.. parsed-literal::

    {'he': 55, 'i': 31, 'she': 44, 'u': 21}



.. code:: python

     [1, 2, 3, 4, 1, 4, 1].count(1)




.. parsed-literal::

    3



.. code:: python

    [1,2,3][::-1]




.. parsed-literal::

    [3, 2, 1]



.. code:: python

    a = [1,2,3,2,1]
    a.remove(1) #insert, remove or sort only modify the list have no return value printed
    a.insert(2, -1) # 2 is index, -1 is value
    b = [1,2,3,2,1]
    b.pop(1) # 1 is index
    print(a)
    a.reverse()
    print(a)
    print(b)


.. parsed-literal::

    [2, 3, -1, 2, 1]
    [1, 2, -1, 3, 2]
    [1, 3, 2, 1]


.. code:: python

    delete_nth = lambda order, max_e: [x for i, x in enumerate(order) if order[:i].count(x) < max_e]
    delete_nth([20,37,20,21],1)  #item appears at most 1 times




.. parsed-literal::

    [20, 37, 21]



.. code:: python

    from collections import defaultdict
    d = defaultdict(list)
    d[1] = 3 # int, not default list
    d[1] = [4]
    d[1].append(5)
    d[2]  #set to default []
    d




.. parsed-literal::

    defaultdict(<class 'list'>, {1: [4, 5], 2: []})



.. code:: python

    i = defaultdict(int)
    i[1]




.. parsed-literal::

    0



.. code:: python

    #class to json obj, from: http://stackoverflow.com/questions/3768895
    from json import JSONEncoder
    class MyEncoder(JSONEncoder):
        def default(self, o):
            return o.__dict__    
    
    j = MyEncoder().encode(p)
    json.loads(j)
    
    with open('allgoods.json', 'w') as outfile:
        json.dump(map_goods, outfile,  sort_keys=True, indent=4 )

Time
====

.. code:: python

    import datetime
    import pytz
    tz = pytz.timezone('Asia/Shanghai')
    print(datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")  )
    print(datetime.datetime.now(tz).strftime("%Y-%m-%d_%H-%M-%S") )


.. parsed-literal::

    2015-05-31_14-44-33
    2015-05-31_22-44-33


System
======

.. code:: python

    import glob,os
    os.chdir("/home/")
    glob.glob('*')




.. parsed-literal::

    ['ec2-user']



.. code:: python

    import time
    time.sleep(0.2)

.. code:: python

    import sys
    print(sys.path)


.. parsed-literal::

    ['', '/root/anaconda3/lib/python35.zip', '/root/anaconda3/lib/python3.5', '/root/anaconda3/lib/python3.5/plat-linux', '/root/anaconda3/lib/python3.5/lib-dynload', '/root/anaconda3/lib/python3.5/site-packages', '/root/anaconda3/lib/python3.5/site-packages/Sphinx-1.4.1-py3.5.egg', '/root/anaconda3/lib/python3.5/site-packages/setuptools-23.0.0-py3.5.egg', '/root/anaconda3/lib/python3.5/site-packages/IPython/extensions', '/root/.ipython']


.. code:: python

    import os.path
    os.path.isfile("/tmp") 
    os.path.exists("/tmp")

.. code:: python

    exec(open("comm.py",encoding='utf-8').read())

.. code:: python

    import sys
    sys.version




.. parsed-literal::

    '3.5.2 |Anaconda 4.1.1 (64-bit)| (default, Jul  2 2016, 17:53:06) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]'



.. code:: python

    import pexpect
    pexpect.__version__




.. parsed-literal::

    '4.0.1'



code practice
=============

http://www.codewars.com/

Packages
========

Pexpect
-------

| https://pexpect.readthedocs.io/en/stable/install.html
| Pexpect is a pure Python module for spawning child applications;
  controlling them; and responding to expected patterns in their output.

.. code:: python

    import string
    import unittest
    
    def str_len(data):
        return len(data)
    
    class MyTest(unittest.TestCase):
        def test_StrLen(self):
            self.assertEqual(str_len(""), 0)
            self.assertEqual(str_len("Hello World"), 11)
    
    if __name__ == '__main__':
        unittest.main(argv=['ignored', '-v'], exit=False)


.. parsed-literal::

    test_StrLen (__main__.MyTest) ... ok
    
    ----------------------------------------------------------------------
    Ran 1 test in 0.003s
    
    OK

